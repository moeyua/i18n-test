---
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro'
import Comments from '~/components/Comments.astro'
import Pagination from '~/components/Pagination.astro'
import SiteSeo from '~/components/SiteSeo.astro'
import LayoutDefault from '~/layouts/LayoutDefault.astro'
import LayoutPost from '~/layouts/LayoutPost.astro'
import { getPosts } from '~/utils'

export const getStaticPaths = (async () => {
  const posts = await getPosts()
  const languages = ['zh', 'en', 'es', 'ru', 'ja']

  return languages.flatMap((lang) => {
    // 过滤出当前语言的文章
    const langPosts = posts.filter((post) => {
      const postLang = post.slug.split('/')[0]
      return postLang === lang
    })

    return langPosts.map((post, idx) => {
      const prev = langPosts[idx - 1]
      const next = langPosts[idx + 1]
      const actualSlug = post.slug.split('/').slice(1).join('/')

      const translations = posts.filter((p) => {
        const otherSlug = p.slug.split('/').slice(1).join('/')
        const otherLang = p.slug.split('/')[0]
        return otherSlug === actualSlug && otherLang !== lang
      })

      return {
        params: {
          lang,
          slug: actualSlug,
        },
        props: {
          entry: post,
          next,
          prev,
          lang,
          translations,
        },
      }
    })
  })
}) satisfies GetStaticPaths

type Props = InferGetStaticPropsType<typeof getStaticPaths>

const { entry, prev, next, lang, translations } = Astro.props
const { Content } = await entry.render()
const { translate: t } = Astro.locals

function getUrl(slug: string | undefined, targetLang: string = lang) {
  if (!slug) return ''
  const actualSlug = slug.split('/').slice(1).join('/')
  return `/${targetLang}/posts/${actualSlug}`
}
---

<LayoutDefault>
  <SiteSeo slot="seo" title={entry.data.title} desc={entry.data.description} banner={entry.data.banner} />

  <LayoutPost post={entry}>
    <Content />
  </LayoutPost>

  <Pagination
    showLeft={Boolean(prev)}
    leftTitle={`${t('prev_post')}: ${prev?.data.title}`}
    leftUrl={getUrl(prev?.slug)}
    showRight={Boolean(next)}
    rightTitle={`${t('next_post')}: ${next?.data.title}`}
    rightUrl={getUrl(next?.slug)}
    showPageCount={false}
  />
  <!-- BUG 这里使用 client:visible 会导致构建失败。ref: https://github.com/withastro/astro/issues/7329 -->
  <Comments post={entry} />
</LayoutDefault>

<script>
  import '@github/clipboard-copy-element'

  document.addEventListener('clipboard-copy', (event) => {
    const target = event.target as HTMLElement
    const icon = target.querySelector('.icon') as HTMLElement
    icon.classList.replace('i-mdi-content-copy', 'i-mdi-check')
    setTimeout(() => {
      icon.classList.replace('i-mdi-check', 'i-mdi-content-copy')
    }, 1500)
  })

  const codeBlocks = Array.from(document.querySelectorAll('pre'))
  const icon = "<div class='i-mdi-content-copy icon text-white'></div>"
  for (const codeBlock of codeBlocks) {
    const wrapper = document.createElement('div')
    wrapper.className = 'code-container'

    const copyButton = document.createElement('clipboard-copy')
    const code = codeBlock.querySelector('code')
    copyButton.value = code?.textContent ?? ''
    copyButton.className = 'clipboard-copy'
    copyButton.innerHTML = icon

    codeBlock.appendChild(copyButton)

    codeBlock.parentNode?.insertBefore(wrapper, codeBlock)
    wrapper.appendChild(codeBlock)
  }
</script>

<style is:global>
  .code-container {
    position: relative;
  }
  .clipboard-copy {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    width: 1.75rem;
    height: 1.75rem;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 0.25rem;
  }

  .clipboard-copy:hover {
    background-color: #30363d;
  }
</style>
